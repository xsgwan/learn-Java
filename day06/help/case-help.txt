案例1: 买飞机票
案例2: 生成验证码
	random生成0-2的随机数，0-数字,1-大写字母,2-小写字母
		0-9:	random 0-9
		A-Z:	(cahr) [random (0 - 25) + 65]
		a-z:	(char) [random (0 - 25) + 97]
案例3: 评委打分
案例4: 数字加密
	encrypt():
		先用调用split()将数字拆分成数组，后对每个元素进行加密，最后调用reverse()将数组反转
	split():
		先确定数字位数，动态申请数组空间，将每位数字依次放入
	reverse():
		i=0;j=numbers.length;
		i<j:交换i和j处的数据；
		i++；j--;
案例5: 数组拷贝
	int[] arr2 = arr; // 并不是数据拷贝，而是将数组变量赋值给另一个数组变量，
			两个数组变量通过同一个地址访问同一个数组对象
案例6: 抢红包
	
	方案一：			[性能不好，每次数值重置为0，死循环执行次数越多]
		随机一个索引，判断该处数据==0？通过死循环while(tree)找到一个数值不为0的索引：红包就是该索引的数值
		取得红包后，该处数值重新赋值为0
	方案二：将红包数组顺序打乱，依次顺序就是随机红包顺序
	方案三:	随机一个索引，其位置处的数据即为用户抽到的红包，并将此处数据与数组最后处进行交换
		后续用户随机索引范围-1,重复上述操作
案例七: 找素数
	素数(data)判断思路:
		从2开始遍历到该数的一半的数据，看是否有数据可以整除它，有则不是素数，没有则是素数；
		data若的有大于data/2的因数，则另一个因数则小于2，即为1；任何数都可以被 1 整除；
		实际上秩序遍历到data的 算数平方根 就够了，若有> 平方根 的因数，则另一个因数比 < 算数平方根
	方案一:
		judgePrimeNumber(start, end)通过循环判断范围内每个数是否为素数，并进行标记，素数则true，合数则false；
		根据标记进行输出；
	方案二:
		为外部标签指定标签OUT，coutinue OUT;可结束外部循环的当此执行；
	方案三:
		将判断素数独立为一个方法，main方法中循环，通过素数判断方法，输出素数；
案例八:	打印(先打印行再打印列)
	一：打印九九乘法表(列数j等于行数i）
		循环打印n行，循环打印i列
	二：打印*号：先打空格，再打*
		n行：
			1-(n+1)/2行：
				空格	(n+1)/2-i
				*	2*i-1
			(n+1)/2+1行：
				空格	i-(n+1)/2
				*	2*(n+1-i)-1
		
